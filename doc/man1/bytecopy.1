.TH BYTECOPY 1 "July 2022" UNIX "User Commands"
.SH NAME
bytecopy \- copy bytes between files
.SH SYNOPSIS
.B bytecopy
[\fIOPTION\fR]... \fISTART\fR [\fIEND\fR]
.br
.B bytecopy
[\fIOPTION\fR]... \fISTART\fR [+\fILENGTH\fR]
.br
.B bytecopy
[\fIOPTION\fR]... [+\fILENGTH\fR]
.SH DESCRIPTION
Copy arbitrary ranges of bytes from one file to another or between different locations in the same file.
.br
A file means any regular or special file or open file descriptor on which read or write operations may be performed.
.br
The files as well as the range to copy may be of any size within operating system and file system limits.
.PP
\fISTART\fR is the zero-based offset of the first byte to copy, counted from the beginning of the input file.
.br
If not specified, no initial seek operation will be performed on the input (see also -s).
.PP
\fIEND\fR is the zero-based offset at which the copy process shall end.
This means the first byte not to be copied, counted from the beginning of the input file.
The location may be one after the last byte in the file.
.br
If not specified, the copy operation is unbounded and will continue until the end of input. That is, until a read operation returns no data.
.br
Subtracting END form START yields the total number of bytes to copy. END may be equal to START, in which case nothing is copied, but must not be smaller.
.PP
\fILENGTH\fR is the number of bytes to be copied. Prefixed with a '+' (plus sign), this may be specified alternatively to END, while the corresponding value for END is calculated by adding LENGTH to START.
.PP
When START is omitted, END is equivalent to LENGTH.
.br
Passing a '-' (dash) in place of START or END is equivalent to omitting them.
.PP
Numbers (N) may be specified as
.IP
N    decimal      (e.g. 1024)
.br
0N   octal        (e.g. 02000)
.br
0xN  hexadecimal  (e.g. 0x400)
.PP
A number may be followed by one of the following factor suffixes:
.IP
K    1024
.br
M    1024 * 1024
.br
G    1024 * 1024 * 1024
.SS Relative offsets
The values for START, END, LENGTH as well as options -T and -w may refer to the current size of a file, using ':' (colon) for input or '?' (question mark) for output. Additionally, a negative or positive offset may be specified. For example, with a START value of ':-1024' copying will begin 1024 bytes before the end of the input file, and an END (LENGTH) value of '+?+0x80' would copy 128 bytes more than currently are in the output file.
.br
For this to work, the respective file must be seekable.
.SS Index
Instead of specifying the values for START or END directly, they may be read from an index file. The index file is an array of 64-bit (8-byte) integers representing byte offsets. It is read from file descriptor 3 by default.
.br
See options -r, -x and -X.
.PP
To use an offset value from the index, specify its zero-based array position prefixed with an '*' (asterisk) for START or END.
A '*' that is not followed by any number will read the next value from whatever the current position of the index file is. This allows to read offset values from non-seekable resources.
.PP
As a shorthand for extracting the range bounded by two adjacent index entries, the position of the range prefixed with a '^' (caret) may be passed for START, overriding END.
.br
Range positions are derived as follows (example for an index with three entries):
.IP
<start of input> ^0 <first offset = *0> ^1 <second offset = *1> ^2 <third offset = *2> ^3 <end of input>
.SH OPTIONS
.TP
.B \-b \fISIZE
Set the maximum number of bytes to be buffered during one read/write cycle.
.br
The default is 512K = 524288 bytes.
If the total number of bytes to copy is known and smaller than SIZE, the buffer will be automatically decreased to the required length.
.TP
.B \-B
Always fill the entire buffer before writing, unless END or the end of input has been reached.
.br
Normally, if a single read operation does not fill the buffer completely, whatever has been read will be output immediately.
Partial reads may occur when reading form remote resources or terminals but usually are of no concern for regular files and local storage devices.
.TP
.B \-e
Write the final buffer even if it is empty. That is, perform a write operation even if the byte count is zero.
The effect of this, if any, depends on the underlying device and its configuration/implementation.
.TP
.B \-E
In case the number of bytes to copy is specified (END or LENGTH given), do not consider a premature end of input an error.
Otherwise, an error is reported if not all bytes could be read.
.TP
.B \-h
Print options and usage summary, then exit.
.TP
.B \-i \fIFILE
Open FILE for reading and use it as input instead of the standard input. This overrides -I.
.TP
.B \-I \fIFD
Read input from file descriptor FD instead of the standard input.
.TP
.B \-n
Print each progress report on a new line. A new progress report (unless disabled with -q or -Q) is printed after each read/write cycle and normally overwrites the previous one.
.TP
.B \-o \fIFILE
Open FILE for writing and use it as output instead of the standard output. This overrides -O.
.br
If the file does not exist it will be created. For overwriting a file see -t.
.br
By default, an attempt is made to seek to the end of the file before writing.
When writing directly to a storage device, you will have to specify -w or -t as appending will write beyond bounds.
.TP
.B \-O \fIFD
Write output to file descriptor FD instead of the standard output.
.TP
.B \-q
Be quiet. Do not report progress.
.br
By default, statistics are printed to standard error after each read/write cycle.
.TP
.B \-Q
Be more quiet. Do not print any progress or status messages, only errors, to standard error.
.TP
.B \-r \fIFILE
Open FILE for reading and use it as resource for the index array. This overrides -X.
.TP
.B \-s
Skip input instead of seeking. That is, read and discard as many bytes from the input as necessary to reach START instead of directly seeking to that position.
.br
This should only be used if the input is not seekable and the data cannot be accessed by other means.
.TP
.B \-S
Synchronize storage after each write. Requests that all data be written/flushed to the storage immediately instead of being buffered by the operating system.
.br
This is useful to minimize cache usage and improve progress monitoring when copying from a fast to a slow slow storage.
It can also reduce data loss during a lengthy copy process in case of a system crash.
.br
For maximum speed this option should be avoided. When using -o consider using -y or -Y instead.
.TP
.B \-t
Truncate the output file if it already exists, upon opening with -o.
.br
All data in the file will be discarded and the file size will be set to zero.
.br
Writing will begin at the start of the file, even if its size is increased again with -T, unless -w is used.
.br
For special/device files this will have no effect other than writing starting at the beginning.
.TP
.B \-T SIZE
Set the length of the output file to SIZE before copying. This may shirk or grow the file.
.br
Existing data within the new range will be preserved unless -t is also used.
.br
Resizing does not reposition the file's write pointer, whether it lies within the new range or not.
.br
When using -o without -t or -w, writing will start at the end of the resized file.
.br
Note that '?' in the argument to -w will refer to the new file size, while for all other arguments it refers to the original size.
.TP
.B \-w POS
Seek to POS in output before writing. Where POS is the zero-based offset of the first byte to (over)write, counted from the beginning of the output file.
.br
Note that if a file descriptor has been opened in append mode any write operation will commence at the end of the file regardless of a previous seek. So, for this option to work correctly you need to either open the output file using -o or open a file descriptor at the shell level in read/write mode (like 1<>output.file).
.br
Seeking to a position beyond the end of a regular file is legit and the gap will be filled with zero-bytes upon first write. Advanced file systems are able to accomplish this logically without using up physical disk space until something is actually written to the gap.
.br
Passing a '-' (dash) for POS prevents any seek operation on the output, see -o.
.TP
.B \-x OFFSET
Use an offset for reading from the index array. Where OFFSET is a zero-based byte position counted form the beginning of the index file pointing to the first index entry.
.TP
.B \-X FD
Read the index array from file descriptor FD instead of the default 3.
.TP
.B \-y
When using -o, open the output file in data synchronized mode. This instructs the operating system not to buffer written data but flush it directly to the storage. Some file metadata, such as the modification timestamp may not be updated immediately. See also -S and -Y.
.TP
.B \-Y
When using -o, open the output file in fully synchronized mode. This is like -y but also synchronizes all file metadata immediately.
.SH EXAMPLES
Extract a section of 300 bytes, starting at offset 1000, from the input file to a new file:
.IP
bytecopy 1000 1300 < source.file > new.file
.PP
or equivalently:
.IP
bytecopy 1000 +300 < source.file > new.file
.PP
or equivalently:
.IP
bytecopy -i source.file -to new.file 1000 +300
.PP
Copy 1048576 bytes of random data to a file:
.br
Repeating this command will append one more megabyte to the output file each time.
.IP
bytecopy -o output.file +1M < /dev/urandom
.PP
Update contents of a file:
.IP
echo "Hello World!" > some.file
.br
echo -n "Earth" | bytecopy -o some.file -w 6
.PP
or more safely, specifying the field length:
.IP
echo "Earth" | bytecopy -o some.file -w6 +5
.PP
Extract the segment between the second and the third index entry:
.br
Unless -x is specified with an argument other than zero, the actual values for START and END are read from byte offsets 8 and 16 in the index file, respectively.
.IP
bytecopy -i big.file *1 *2 3<big.file.idx > segment.file
.PP
or equivalently:
.IP
bytecopy -i big.file -r big.file.idx ^2 > segment.file
.PP
Copy a disk image from a compressed file directly to a device, synchronized, in blocks of 4 megabytes:
.IP
zcat bootable.img.gz | bytecopy -Sb4M > /dev/sdX
.PP
Copy a disk image to a device, synchronized, with explicit range to indicate progress:
.IP
bytecopy -i disk.img -yo /dev/sdX -w0 +:
.SH AUTHOR
Written by Johannes Schmitz
.SH SOURCE
git://github.com/jonny112/bytecopy.git
